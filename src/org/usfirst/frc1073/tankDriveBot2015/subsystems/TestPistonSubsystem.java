// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.tankDriveBot2015.subsystems;

import org.usfirst.frc1073.tankDriveBot2015.RobotMap;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class TestPistonSubsystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Solenoid testCompressorSolenoid = RobotMap.testPistonSubsystemtestCompressorSolenoid;
    Solenoid testExhaustSolenoid = RobotMap.testPistonSubsystemtestExhaustSolenoid;
    DigitalInput testMag = RobotMap.testPistonSubsystemtestMag;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private final boolean OPEN = true;
    private final boolean CLOSE = false;
    private boolean wasPassed = true;
    private String state = "stopped.";
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    // returns the value of the mag encoder. false is when mag encoder is on it
    public boolean getTestMag(){
    	return testMag.get();
    }
    
    // returns the state of elevator
    public String getState(){
    	return state;
    }
    
    // method for lifting
    public void lift(){
    	testExhaustSolenoid.set(CLOSE);
    	testCompressorSolenoid.set(OPEN);
    	state = "lifting...";
    }
    
    // method for hold stopping which means it can stop in any location on the piston
    public void holdStop(){
    	testExhaustSolenoid.set(CLOSE);
    	testCompressorSolenoid.set(CLOSE);
    	state = "stopped.";
    }
    
    
    // method for lowering 
    public void lower(){
    	testCompressorSolenoid.set(OPEN);
    	testCompressorSolenoid.set(CLOSE);
    	testExhaustSolenoid.set(OPEN);
    	state = "lowering...";
    	
    }
    
    // method to reset WasPassed for more testing after 
    public void setWasPassed(boolean newVal){
    	wasPassed = newVal;
    }
    
    // returns wasPressed
    public boolean getWasPassed(){
    	return wasPassed;
    }
    
    // method to run a simple test where the piston stops at the meg encoder
    public void testPiston(){
    	if(!testMag.get()) wasPassed = false;
    	if(!testMag.get() || !wasPassed) {
    		holdStop();
    	}
    	else lift();
    	
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}

